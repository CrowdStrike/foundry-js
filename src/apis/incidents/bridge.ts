/**
*
* This file is autogenerated from the configuration file at `config/apis/incidents.json`.
*
* DO NOT EDIT DIRECTLY
*
* If you need to change the contents of this file please edit the above configuration file and
* then run:
*
* ```
* yarn cs-gen platform-apis
* ```
*
**/

import type {
GetCombinedCrowdscoresV1QueryParams,
  GetQueriesBehaviorsV1QueryParams,
  GetQueriesIncidentsV1QueryParams,
  PostAggregatesBehaviorsGetV1QueryParams,
  PostAggregatesIncidentsGetV1QueryParams,
  PostEntitiesBehaviorsGetV1QueryParams,
  PostEntitiesIncidentActionsV1QueryParams,
  PostEntitiesIncidentsGetV1QueryParams,
GetCombinedCrowdscoresV1ApiResponse,
  GetQueriesBehaviorsV1ApiResponse,
  GetQueriesIncidentsV1ApiResponse,
  PostAggregatesBehaviorsGetV1ApiResponse,
  PostAggregatesIncidentsGetV1ApiResponse,
  PostEntitiesBehaviorsGetV1ApiResponse,
  PostEntitiesIncidentActionsV1ApiResponse,
  PostEntitiesIncidentsGetV1ApiResponse,
GetCombinedCrowdscoresV1RequestMessage,
  GetQueriesBehaviorsV1RequestMessage,
  GetQueriesIncidentsV1RequestMessage,
  PostAggregatesBehaviorsGetV1RequestMessage,
  PostAggregatesIncidentsGetV1RequestMessage,
  PostEntitiesBehaviorsGetV1RequestMessage,
  PostEntitiesIncidentActionsV1RequestMessage,
  PostEntitiesIncidentsGetV1RequestMessage,
PostAggregatesBehaviorsGetV1PostData,
  PostAggregatesIncidentsGetV1PostData,
  PostEntitiesBehaviorsGetV1PostData,
  PostEntitiesIncidentActionsV1PostData,
  PostEntitiesIncidentsGetV1PostData,
} from './types';

import type { Bridge } from '../../bridge';

export class IncidentsApiBridge {

private bridge;

constructor(bridge: Bridge) {
  this.bridge = bridge;
}


    async getCombinedCrowdscoresV1(urlParams: GetCombinedCrowdscoresV1QueryParams = {}): Promise<GetCombinedCrowdscoresV1ApiResponse> {
        
            const message: GetCombinedCrowdscoresV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'getCombinedCrowdscoresV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesBehaviorsV1(urlParams: GetQueriesBehaviorsV1QueryParams = {}): Promise<GetQueriesBehaviorsV1ApiResponse> {
        
            const message: GetQueriesBehaviorsV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'getQueriesBehaviorsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesIncidentsV1(urlParams: GetQueriesIncidentsV1QueryParams = {}): Promise<GetQueriesIncidentsV1ApiResponse> {
        
            const message: GetQueriesIncidentsV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'getQueriesIncidentsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesBehaviorsGetV1(postBody: PostAggregatesBehaviorsGetV1PostData, urlParams: PostAggregatesBehaviorsGetV1QueryParams = {}): Promise<PostAggregatesBehaviorsGetV1ApiResponse> {
        
            const message: PostAggregatesBehaviorsGetV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'postAggregatesBehaviorsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesIncidentsGetV1(postBody: PostAggregatesIncidentsGetV1PostData, urlParams: PostAggregatesIncidentsGetV1QueryParams = {}): Promise<PostAggregatesIncidentsGetV1ApiResponse> {
        
            const message: PostAggregatesIncidentsGetV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'postAggregatesIncidentsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesBehaviorsGetV1(postBody: PostEntitiesBehaviorsGetV1PostData, urlParams: PostEntitiesBehaviorsGetV1QueryParams = {}): Promise<PostEntitiesBehaviorsGetV1ApiResponse> {
        
            const message: PostEntitiesBehaviorsGetV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'postEntitiesBehaviorsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesIncidentActionsV1(postBody: PostEntitiesIncidentActionsV1PostData, urlParams: PostEntitiesIncidentActionsV1QueryParams = {}): Promise<PostEntitiesIncidentActionsV1ApiResponse> {
        
            const message: PostEntitiesIncidentActionsV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'postEntitiesIncidentActionsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesIncidentsGetV1(postBody: PostEntitiesIncidentsGetV1PostData, urlParams: PostEntitiesIncidentsGetV1QueryParams = {}): Promise<PostEntitiesIncidentsGetV1ApiResponse> {
        
            const message: PostEntitiesIncidentsGetV1RequestMessage = {
                type: 'api',
                api: 'incidents',
                method: 'postEntitiesIncidentsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

}
