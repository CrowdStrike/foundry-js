/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/

import type { Bridge } from '../../bridge';

import type {
  ApiResponsePayload,
  BaseApiRequestMessage,
  BaseApiResponseMessage,
  BaseUrlParams,
  QueryParam,
} from '../../types';

export type IncidentsRequestApi = 'incidents';

export type CommonApiResponseMessage =
  BaseApiResponseMessage<ApiResponsePayload>;

export interface CommonApiRequestMessage
  extends BaseApiRequestMessage<BaseUrlParams, unknown> {
  api: IncidentsRequestApi;
}

// types for getCombinedCrowdscoresV1

export interface GetCombinedCrowdscoresV1QueryParams extends BaseUrlParams {
  filter?: string;
  limit?: QueryParam;
  offset?: QueryParam;
  sort?: QueryParam;
}

export type GetCombinedCrowdscoresV1ApiResponse = ApiResponsePayload;

export type GetCombinedCrowdscoresV1ResponseMessage =
  BaseApiResponseMessage<GetCombinedCrowdscoresV1ApiResponse>;

export interface GetCombinedCrowdscoresV1RequestMessage
  extends BaseApiRequestMessage<GetCombinedCrowdscoresV1QueryParams> {
  api: IncidentsRequestApi;
  method: 'getCombinedCrowdscoresV1';
}

// types for getQueriesBehaviorsV1

export interface GetQueriesBehaviorsV1QueryParams extends BaseUrlParams {
  filter?: string;
  limit?: QueryParam;
  offset?: QueryParam;
  sort?: QueryParam;
}

export type GetQueriesBehaviorsV1ApiResponse = ApiResponsePayload;

export type GetQueriesBehaviorsV1ResponseMessage =
  BaseApiResponseMessage<GetQueriesBehaviorsV1ApiResponse>;

export interface GetQueriesBehaviorsV1RequestMessage
  extends BaseApiRequestMessage<GetQueriesBehaviorsV1QueryParams> {
  api: IncidentsRequestApi;
  method: 'getQueriesBehaviorsV1';
}

// types for getQueriesIncidentsV1

export interface GetQueriesIncidentsV1QueryParams extends BaseUrlParams {
  filter?: string;
  limit?: QueryParam;
  offset?: QueryParam;
  sort?: QueryParam;
}

export type GetQueriesIncidentsV1ApiResponse = ApiResponsePayload;

export type GetQueriesIncidentsV1ResponseMessage =
  BaseApiResponseMessage<GetQueriesIncidentsV1ApiResponse>;

export interface GetQueriesIncidentsV1RequestMessage
  extends BaseApiRequestMessage<GetQueriesIncidentsV1QueryParams> {
  api: IncidentsRequestApi;
  method: 'getQueriesIncidentsV1';
}

// types for postAggregatesBehaviorsGetV1

export type PostAggregatesBehaviorsGetV1QueryParams = BaseUrlParams;

export type PostAggregatesBehaviorsGetV1ApiResponse = ApiResponsePayload;

export interface PostAggregatesBehaviorsGetV1PostData {}

export type PostAggregatesBehaviorsGetV1ResponseMessage =
  BaseApiResponseMessage<PostAggregatesBehaviorsGetV1ApiResponse>;

export interface PostAggregatesBehaviorsGetV1RequestMessage
  extends BaseApiRequestMessage<
    PostAggregatesBehaviorsGetV1QueryParams,
    PostAggregatesBehaviorsGetV1PostData
  > {
  api: IncidentsRequestApi;
  method: 'postAggregatesBehaviorsGetV1';
}

// types for postAggregatesIncidentsGetV1

export type PostAggregatesIncidentsGetV1QueryParams = BaseUrlParams;

export type PostAggregatesIncidentsGetV1ApiResponse = ApiResponsePayload;

export interface PostAggregatesIncidentsGetV1PostData {}

export type PostAggregatesIncidentsGetV1ResponseMessage =
  BaseApiResponseMessage<PostAggregatesIncidentsGetV1ApiResponse>;

export interface PostAggregatesIncidentsGetV1RequestMessage
  extends BaseApiRequestMessage<
    PostAggregatesIncidentsGetV1QueryParams,
    PostAggregatesIncidentsGetV1PostData
  > {
  api: IncidentsRequestApi;
  method: 'postAggregatesIncidentsGetV1';
}

// types for postEntitiesBehaviorsGetV1

export type PostEntitiesBehaviorsGetV1QueryParams = BaseUrlParams;

export type PostEntitiesBehaviorsGetV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesBehaviorsGetV1PostData {}

export type PostEntitiesBehaviorsGetV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesBehaviorsGetV1ApiResponse>;

export interface PostEntitiesBehaviorsGetV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesBehaviorsGetV1QueryParams,
    PostEntitiesBehaviorsGetV1PostData
  > {
  api: IncidentsRequestApi;
  method: 'postEntitiesBehaviorsGetV1';
}

// types for postEntitiesIncidentActionsV1

export interface PostEntitiesIncidentActionsV1QueryParams
  extends BaseUrlParams {
  note?: QueryParam;
}

export type PostEntitiesIncidentActionsV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesIncidentActionsV1PostData {}

export type PostEntitiesIncidentActionsV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesIncidentActionsV1ApiResponse>;

export interface PostEntitiesIncidentActionsV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesIncidentActionsV1QueryParams,
    PostEntitiesIncidentActionsV1PostData
  > {
  api: IncidentsRequestApi;
  method: 'postEntitiesIncidentActionsV1';
}

// types for postEntitiesIncidentsGetV1

export type PostEntitiesIncidentsGetV1QueryParams = BaseUrlParams;

export type PostEntitiesIncidentsGetV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesIncidentsGetV1PostData {}

export type PostEntitiesIncidentsGetV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesIncidentsGetV1ApiResponse>;

export interface PostEntitiesIncidentsGetV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesIncidentsGetV1QueryParams,
    PostEntitiesIncidentsGetV1PostData
  > {
  api: IncidentsRequestApi;
  method: 'postEntitiesIncidentsGetV1';
}

// general types

export type IncidentsApiRequestMessage =
  | GetCombinedCrowdscoresV1RequestMessage
  | GetQueriesBehaviorsV1RequestMessage
  | GetQueriesIncidentsV1RequestMessage
  | PostAggregatesBehaviorsGetV1RequestMessage
  | PostAggregatesIncidentsGetV1RequestMessage
  | PostEntitiesBehaviorsGetV1RequestMessage
  | PostEntitiesIncidentActionsV1RequestMessage
  | PostEntitiesIncidentsGetV1RequestMessage;

export type IncidentsApiResponseMessage =
  | GetCombinedCrowdscoresV1ResponseMessage
  | GetQueriesBehaviorsV1ResponseMessage
  | GetQueriesIncidentsV1ResponseMessage
  | PostAggregatesBehaviorsGetV1ResponseMessage
  | PostAggregatesIncidentsGetV1ResponseMessage
  | PostEntitiesBehaviorsGetV1ResponseMessage
  | PostEntitiesIncidentActionsV1ResponseMessage
  | PostEntitiesIncidentsGetV1ResponseMessage;

export class IncidentsApiBridge {
  private bridge;

  constructor(bridge: Bridge) {
    this.bridge = bridge;
  }

  getBridge() {
    return this.bridge;
  }

  async getCombinedCrowdscoresV1(
    urlParams: GetCombinedCrowdscoresV1QueryParams = {},
  ): Promise<GetCombinedCrowdscoresV1ApiResponse> {
    const message: GetCombinedCrowdscoresV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'getCombinedCrowdscoresV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async getQueriesBehaviorsV1(
    urlParams: GetQueriesBehaviorsV1QueryParams = {},
  ): Promise<GetQueriesBehaviorsV1ApiResponse> {
    const message: GetQueriesBehaviorsV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'getQueriesBehaviorsV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async getQueriesIncidentsV1(
    urlParams: GetQueriesIncidentsV1QueryParams = {},
  ): Promise<GetQueriesIncidentsV1ApiResponse> {
    const message: GetQueriesIncidentsV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'getQueriesIncidentsV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postAggregatesBehaviorsGetV1(
    postBody: PostAggregatesBehaviorsGetV1PostData,
    urlParams: PostAggregatesBehaviorsGetV1QueryParams = {},
  ): Promise<PostAggregatesBehaviorsGetV1ApiResponse> {
    const message: PostAggregatesBehaviorsGetV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'postAggregatesBehaviorsGetV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postAggregatesIncidentsGetV1(
    postBody: PostAggregatesIncidentsGetV1PostData,
    urlParams: PostAggregatesIncidentsGetV1QueryParams = {},
  ): Promise<PostAggregatesIncidentsGetV1ApiResponse> {
    const message: PostAggregatesIncidentsGetV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'postAggregatesIncidentsGetV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesBehaviorsGetV1(
    postBody: PostEntitiesBehaviorsGetV1PostData,
    urlParams: PostEntitiesBehaviorsGetV1QueryParams = {},
  ): Promise<PostEntitiesBehaviorsGetV1ApiResponse> {
    const message: PostEntitiesBehaviorsGetV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'postEntitiesBehaviorsGetV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesIncidentActionsV1(
    postBody: PostEntitiesIncidentActionsV1PostData,
    urlParams: PostEntitiesIncidentActionsV1QueryParams = {},
  ): Promise<PostEntitiesIncidentActionsV1ApiResponse> {
    const message: PostEntitiesIncidentActionsV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'postEntitiesIncidentActionsV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesIncidentsGetV1(
    postBody: PostEntitiesIncidentsGetV1PostData,
    urlParams: PostEntitiesIncidentsGetV1QueryParams = {},
  ): Promise<PostEntitiesIncidentsGetV1ApiResponse> {
    const message: PostEntitiesIncidentsGetV1RequestMessage = {
      type: 'api',
      api: 'incidents',
      method: 'postEntitiesIncidentsGetV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }
}
