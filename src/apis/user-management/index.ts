/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/

import type { Bridge } from '../../bridge';

import type {
  ApiResponsePayload,
  BaseApiRequestMessage,
  BaseApiResponseMessage,
  BaseUrlParams,
  QueryParam,
} from '../../types';

export type UserManagementRequestApi = 'userManagement';

export type CommonApiResponseMessage =
  BaseApiResponseMessage<ApiResponsePayload>;

export interface CommonApiRequestMessage
  extends BaseApiRequestMessage<BaseUrlParams, unknown> {
  api: UserManagementRequestApi;
}

// types for getQueriesUsersV1

export interface GetQueriesUsersV1QueryParams extends BaseUrlParams {
  filter?: string;
  offset?: QueryParam;
  limit?: QueryParam;
  sort?: QueryParam;
}

export type GetQueriesUsersV1ApiResponse = ApiResponsePayload;

export type GetQueriesUsersV1ResponseMessage =
  BaseApiResponseMessage<GetQueriesUsersV1ApiResponse>;

export interface GetQueriesUsersV1RequestMessage
  extends BaseApiRequestMessage<GetQueriesUsersV1QueryParams> {
  api: UserManagementRequestApi;
  method: 'getQueriesUsersV1';
}

// types for postEntitiesUsersGetV1

export type PostEntitiesUsersGetV1QueryParams = BaseUrlParams;

export type PostEntitiesUsersGetV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesUsersGetV1PostData {}

export type PostEntitiesUsersGetV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesUsersGetV1ApiResponse>;

export interface PostEntitiesUsersGetV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesUsersGetV1QueryParams,
    PostEntitiesUsersGetV1PostData
  > {
  api: UserManagementRequestApi;
  method: 'postEntitiesUsersGetV1';
}

// general types

export type UserManagementApiRequestMessage =
  | GetQueriesUsersV1RequestMessage
  | PostEntitiesUsersGetV1RequestMessage;

export type UserManagementApiResponseMessage =
  | GetQueriesUsersV1ResponseMessage
  | PostEntitiesUsersGetV1ResponseMessage;

export class UserManagementApiBridge {
  private bridge;

  constructor(bridge: Bridge) {
    this.bridge = bridge;
  }

  getBridge() {
    return this.bridge;
  }

  async getQueriesUsersV1(
    urlParams: GetQueriesUsersV1QueryParams = {},
  ): Promise<GetQueriesUsersV1ApiResponse> {
    const message: GetQueriesUsersV1RequestMessage = {
      type: 'api',
      api: 'userManagement',
      method: 'getQueriesUsersV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesUsersGetV1(
    postBody: PostEntitiesUsersGetV1PostData,
    urlParams: PostEntitiesUsersGetV1QueryParams = {},
  ): Promise<PostEntitiesUsersGetV1ApiResponse> {
    const message: PostEntitiesUsersGetV1RequestMessage = {
      type: 'api',
      api: 'userManagement',
      method: 'postEntitiesUsersGetV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }
}
