/**
*
* This file is autogenerated from the configuration file at `config/apis/devices.json`.
*
* DO NOT EDIT DIRECTLY
*
* If you need to change the contents of this file please edit the above configuration file and
* then run:
*
* ```
* yarn cs-gen platform-apis
* ```
*
**/

import type {
DeleteEntitiesGroupsV1QueryParams,
  GetAggregatesBucketsV1QueryParams,
  GetAggregatesTagPrefixCountsV1QueryParams,
  GetEntitiesGroupsV1QueryParams,
  GetEntitiesReleasesV1QueryParams,
  GetEntitiesRespondV1QueryParams,
  GetQueriesAvailableGroupsV1QueryParams,
  GetQueriesDevicesHiddenV2QueryParams,
  GetQueriesDevicesV2QueryParams,
  GetQueriesGroupsV1QueryParams,
  PatchEntitiesDevicesTagsV2QueryParams,
  PatchEntitiesGroupsV1QueryParams,
  PostAggregatesDevicesGetV1QueryParams,
  PostCombinedDevicesLoginHistoryV1QueryParams,
  PostEntitiesDevicesActionsV4QueryParams,
  PostEntitiesDevicesHiddenActionsV4QueryParams,
  PostEntitiesDevicesReportsV1QueryParams,
  PostEntitiesDevicesV2QueryParams,
  PostEntitiesGroupActionsV1QueryParams,
  PostEntitiesGroupsV1QueryParams,
  PostEntitiesReleasesV1QueryParams,
DeleteEntitiesGroupsV1ApiResponse,
  GetAggregatesBucketsV1ApiResponse,
  GetAggregatesTagPrefixCountsV1ApiResponse,
  GetEntitiesGroupsV1ApiResponse,
  GetEntitiesReleasesV1ApiResponse,
  GetEntitiesRespondV1ApiResponse,
  GetQueriesAvailableGroupsV1ApiResponse,
  GetQueriesDevicesHiddenV2ApiResponse,
  GetQueriesDevicesV2ApiResponse,
  GetQueriesGroupsV1ApiResponse,
  PatchEntitiesDevicesTagsV2ApiResponse,
  PatchEntitiesGroupsV1ApiResponse,
  PostAggregatesDevicesGetV1ApiResponse,
  PostCombinedDevicesLoginHistoryV1ApiResponse,
  PostEntitiesDevicesActionsV4ApiResponse,
  PostEntitiesDevicesHiddenActionsV4ApiResponse,
  PostEntitiesDevicesReportsV1ApiResponse,
  PostEntitiesDevicesV2ApiResponse,
  PostEntitiesGroupActionsV1ApiResponse,
  PostEntitiesGroupsV1ApiResponse,
  PostEntitiesReleasesV1ApiResponse,
DeleteEntitiesGroupsV1RequestMessage,
  GetAggregatesBucketsV1RequestMessage,
  GetAggregatesTagPrefixCountsV1RequestMessage,
  GetEntitiesGroupsV1RequestMessage,
  GetEntitiesReleasesV1RequestMessage,
  GetEntitiesRespondV1RequestMessage,
  GetQueriesAvailableGroupsV1RequestMessage,
  GetQueriesDevicesHiddenV2RequestMessage,
  GetQueriesDevicesV2RequestMessage,
  GetQueriesGroupsV1RequestMessage,
  PatchEntitiesDevicesTagsV2RequestMessage,
  PatchEntitiesGroupsV1RequestMessage,
  PostAggregatesDevicesGetV1RequestMessage,
  PostCombinedDevicesLoginHistoryV1RequestMessage,
  PostEntitiesDevicesActionsV4RequestMessage,
  PostEntitiesDevicesHiddenActionsV4RequestMessage,
  PostEntitiesDevicesReportsV1RequestMessage,
  PostEntitiesDevicesV2RequestMessage,
  PostEntitiesGroupActionsV1RequestMessage,
  PostEntitiesGroupsV1RequestMessage,
  PostEntitiesReleasesV1RequestMessage,
PatchEntitiesDevicesTagsV2PostData,
  PatchEntitiesGroupsV1PostData,
  PostAggregatesDevicesGetV1PostData,
  PostCombinedDevicesLoginHistoryV1PostData,
  PostEntitiesDevicesActionsV4PostData,
  PostEntitiesDevicesHiddenActionsV4PostData,
  PostEntitiesDevicesReportsV1PostData,
  PostEntitiesDevicesV2PostData,
  PostEntitiesGroupActionsV1PostData,
  PostEntitiesGroupsV1PostData,
  PostEntitiesReleasesV1PostData,
} from './types';

import type { Bridge } from '../../bridge';

export class DevicesApiBridge {

private bridge;

constructor(bridge: Bridge) {
  this.bridge = bridge;
}


    async deleteEntitiesGroupsV1(urlParams: DeleteEntitiesGroupsV1QueryParams): Promise<DeleteEntitiesGroupsV1ApiResponse> {
        
            const message: DeleteEntitiesGroupsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'deleteEntitiesGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getAggregatesBucketsV1(urlParams: GetAggregatesBucketsV1QueryParams): Promise<GetAggregatesBucketsV1ApiResponse> {
        
            const message: GetAggregatesBucketsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getAggregatesBucketsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getAggregatesTagPrefixCountsV1(urlParams: GetAggregatesTagPrefixCountsV1QueryParams): Promise<GetAggregatesTagPrefixCountsV1ApiResponse> {
        
            const message: GetAggregatesTagPrefixCountsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getAggregatesTagPrefixCountsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesGroupsV1(urlParams: GetEntitiesGroupsV1QueryParams): Promise<GetEntitiesGroupsV1ApiResponse> {
        
            const message: GetEntitiesGroupsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getEntitiesGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesReleasesV1(urlParams: GetEntitiesReleasesV1QueryParams): Promise<GetEntitiesReleasesV1ApiResponse> {
        
            const message: GetEntitiesReleasesV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getEntitiesReleasesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesRespondV1(urlParams: GetEntitiesRespondV1QueryParams = {}): Promise<GetEntitiesRespondV1ApiResponse> {
        
            const message: GetEntitiesRespondV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getEntitiesRespondV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesAvailableGroupsV1(urlParams: GetQueriesAvailableGroupsV1QueryParams = {}): Promise<GetQueriesAvailableGroupsV1ApiResponse> {
        
            const message: GetQueriesAvailableGroupsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getQueriesAvailableGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesDevicesHiddenV2(urlParams: GetQueriesDevicesHiddenV2QueryParams = {}): Promise<GetQueriesDevicesHiddenV2ApiResponse> {
        
            const message: GetQueriesDevicesHiddenV2RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getQueriesDevicesHiddenV2',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesDevicesV2(urlParams: GetQueriesDevicesV2QueryParams = {}): Promise<GetQueriesDevicesV2ApiResponse> {
        
            const message: GetQueriesDevicesV2RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getQueriesDevicesV2',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesGroupsV1(urlParams: GetQueriesGroupsV1QueryParams = {}): Promise<GetQueriesGroupsV1ApiResponse> {
        
            const message: GetQueriesGroupsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'getQueriesGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchEntitiesDevicesTagsV2(postBody: PatchEntitiesDevicesTagsV2PostData, urlParams: PatchEntitiesDevicesTagsV2QueryParams = {}): Promise<PatchEntitiesDevicesTagsV2ApiResponse> {
        
            const message: PatchEntitiesDevicesTagsV2RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'patchEntitiesDevicesTagsV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchEntitiesGroupsV1(postBody: PatchEntitiesGroupsV1PostData, urlParams: PatchEntitiesGroupsV1QueryParams = {}): Promise<PatchEntitiesGroupsV1ApiResponse> {
        
            const message: PatchEntitiesGroupsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'patchEntitiesGroupsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesDevicesGetV1(postBody: PostAggregatesDevicesGetV1PostData, urlParams: PostAggregatesDevicesGetV1QueryParams = {}): Promise<PostAggregatesDevicesGetV1ApiResponse> {
        
            const message: PostAggregatesDevicesGetV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postAggregatesDevicesGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postCombinedDevicesLoginHistoryV1(postBody: PostCombinedDevicesLoginHistoryV1PostData, urlParams: PostCombinedDevicesLoginHistoryV1QueryParams = {}): Promise<PostCombinedDevicesLoginHistoryV1ApiResponse> {
        
            const message: PostCombinedDevicesLoginHistoryV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postCombinedDevicesLoginHistoryV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesDevicesActionsV4(postBody: PostEntitiesDevicesActionsV4PostData, urlParams: PostEntitiesDevicesActionsV4QueryParams = {}): Promise<PostEntitiesDevicesActionsV4ApiResponse> {
        
            const message: PostEntitiesDevicesActionsV4RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesDevicesActionsV4',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesDevicesHiddenActionsV4(postBody: PostEntitiesDevicesHiddenActionsV4PostData, urlParams: PostEntitiesDevicesHiddenActionsV4QueryParams = {}): Promise<PostEntitiesDevicesHiddenActionsV4ApiResponse> {
        
            const message: PostEntitiesDevicesHiddenActionsV4RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesDevicesHiddenActionsV4',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesDevicesReportsV1(postBody: PostEntitiesDevicesReportsV1PostData, urlParams: PostEntitiesDevicesReportsV1QueryParams = {}): Promise<PostEntitiesDevicesReportsV1ApiResponse> {
        
            const message: PostEntitiesDevicesReportsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesDevicesReportsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesDevicesV2(postBody: PostEntitiesDevicesV2PostData, urlParams: PostEntitiesDevicesV2QueryParams = {}): Promise<PostEntitiesDevicesV2ApiResponse> {
        
            const message: PostEntitiesDevicesV2RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesDevicesV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesGroupActionsV1(postBody: PostEntitiesGroupActionsV1PostData, urlParams: PostEntitiesGroupActionsV1QueryParams): Promise<PostEntitiesGroupActionsV1ApiResponse> {
        
            const message: PostEntitiesGroupActionsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesGroupActionsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesGroupsV1(postBody: PostEntitiesGroupsV1PostData, urlParams: PostEntitiesGroupsV1QueryParams = {}): Promise<PostEntitiesGroupsV1ApiResponse> {
        
            const message: PostEntitiesGroupsV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesGroupsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesReleasesV1(postBody: PostEntitiesReleasesV1PostData, urlParams: PostEntitiesReleasesV1QueryParams): Promise<PostEntitiesReleasesV1ApiResponse> {
        
            const message: PostEntitiesReleasesV1RequestMessage = {
                type: 'api',
                api: 'devices',
                method: 'postEntitiesReleasesV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

}
