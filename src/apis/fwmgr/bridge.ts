/**
*
* This file is autogenerated from the configuration file at `config/apis/fwmgr.json`.
*
* DO NOT EDIT DIRECTLY
*
* If you need to change the contents of this file please edit the above configuration file and
* then run:
*
* ```
* yarn cs-gen platform-apis
* ```
*
**/

import type {
DeleteEntitiesNetworkLocationsV1QueryParams,
  DeleteEntitiesPoliciesV1QueryParams,
  DeleteEntitiesRuleGroupsV1QueryParams,
  GetEntitiesEventsV1QueryParams,
  GetEntitiesFirewallFieldsV1QueryParams,
  GetEntitiesNetworkLocationsDetailsV1QueryParams,
  GetEntitiesNetworkLocationsV1QueryParams,
  GetEntitiesPlatformsV1QueryParams,
  GetEntitiesPoliciesV1QueryParams,
  GetEntitiesRuleGroupsV1QueryParams,
  GetEntitiesRulesV1QueryParams,
  GetLibraryEntitiesRuleGroupsV1QueryParams,
  GetLibraryQueriesRuleGroupsV1QueryParams,
  GetQueriesEventsV1QueryParams,
  GetQueriesFirewallFieldsV1QueryParams,
  GetQueriesNetworkLocationsV1QueryParams,
  GetQueriesPlatformsV1QueryParams,
  GetQueriesPolicyRulesV1QueryParams,
  GetQueriesRuleGroupsV1QueryParams,
  GetQueriesRulesV1QueryParams,
  PatchEntitiesNetworkLocationsV1QueryParams,
  PatchEntitiesRuleGroupsV1QueryParams,
  PostAggregatesEventsGetV1QueryParams,
  PostAggregatesPolicyRulesGetV1QueryParams,
  PostAggregatesRuleGroupsGetV1QueryParams,
  PostAggregatesRulesGetV1QueryParams,
  PostEntitiesNetworkLocationsMetadataV1QueryParams,
  PostEntitiesNetworkLocationsPrecedenceV1QueryParams,
  PostEntitiesNetworkLocationsV1QueryParams,
  PostEntitiesOntologyV1QueryParams,
  PostEntitiesRuleGroupsV1QueryParams,
  PostEntitiesRulesValidateFilepathV1QueryParams,
  PutEntitiesNetworkLocationsV1QueryParams,
  PutEntitiesPoliciesV2QueryParams,
DeleteEntitiesNetworkLocationsV1ApiResponse,
  DeleteEntitiesPoliciesV1ApiResponse,
  DeleteEntitiesRuleGroupsV1ApiResponse,
  GetEntitiesEventsV1ApiResponse,
  GetEntitiesFirewallFieldsV1ApiResponse,
  GetEntitiesNetworkLocationsDetailsV1ApiResponse,
  GetEntitiesNetworkLocationsV1ApiResponse,
  GetEntitiesPlatformsV1ApiResponse,
  GetEntitiesPoliciesV1ApiResponse,
  GetEntitiesRuleGroupsV1ApiResponse,
  GetEntitiesRulesV1ApiResponse,
  GetLibraryEntitiesRuleGroupsV1ApiResponse,
  GetLibraryQueriesRuleGroupsV1ApiResponse,
  GetQueriesEventsV1ApiResponse,
  GetQueriesFirewallFieldsV1ApiResponse,
  GetQueriesNetworkLocationsV1ApiResponse,
  GetQueriesPlatformsV1ApiResponse,
  GetQueriesPolicyRulesV1ApiResponse,
  GetQueriesRuleGroupsV1ApiResponse,
  GetQueriesRulesV1ApiResponse,
  PatchEntitiesNetworkLocationsV1ApiResponse,
  PatchEntitiesRuleGroupsV1ApiResponse,
  PostAggregatesEventsGetV1ApiResponse,
  PostAggregatesPolicyRulesGetV1ApiResponse,
  PostAggregatesRuleGroupsGetV1ApiResponse,
  PostAggregatesRulesGetV1ApiResponse,
  PostEntitiesNetworkLocationsMetadataV1ApiResponse,
  PostEntitiesNetworkLocationsPrecedenceV1ApiResponse,
  PostEntitiesNetworkLocationsV1ApiResponse,
  PostEntitiesOntologyV1ApiResponse,
  PostEntitiesRuleGroupsV1ApiResponse,
  PostEntitiesRulesValidateFilepathV1ApiResponse,
  PutEntitiesNetworkLocationsV1ApiResponse,
  PutEntitiesPoliciesV2ApiResponse,
DeleteEntitiesNetworkLocationsV1RequestMessage,
  DeleteEntitiesPoliciesV1RequestMessage,
  DeleteEntitiesRuleGroupsV1RequestMessage,
  GetEntitiesEventsV1RequestMessage,
  GetEntitiesFirewallFieldsV1RequestMessage,
  GetEntitiesNetworkLocationsDetailsV1RequestMessage,
  GetEntitiesNetworkLocationsV1RequestMessage,
  GetEntitiesPlatformsV1RequestMessage,
  GetEntitiesPoliciesV1RequestMessage,
  GetEntitiesRuleGroupsV1RequestMessage,
  GetEntitiesRulesV1RequestMessage,
  GetLibraryEntitiesRuleGroupsV1RequestMessage,
  GetLibraryQueriesRuleGroupsV1RequestMessage,
  GetQueriesEventsV1RequestMessage,
  GetQueriesFirewallFieldsV1RequestMessage,
  GetQueriesNetworkLocationsV1RequestMessage,
  GetQueriesPlatformsV1RequestMessage,
  GetQueriesPolicyRulesV1RequestMessage,
  GetQueriesRuleGroupsV1RequestMessage,
  GetQueriesRulesV1RequestMessage,
  PatchEntitiesNetworkLocationsV1RequestMessage,
  PatchEntitiesRuleGroupsV1RequestMessage,
  PostAggregatesEventsGetV1RequestMessage,
  PostAggregatesPolicyRulesGetV1RequestMessage,
  PostAggregatesRuleGroupsGetV1RequestMessage,
  PostAggregatesRulesGetV1RequestMessage,
  PostEntitiesNetworkLocationsMetadataV1RequestMessage,
  PostEntitiesNetworkLocationsPrecedenceV1RequestMessage,
  PostEntitiesNetworkLocationsV1RequestMessage,
  PostEntitiesOntologyV1RequestMessage,
  PostEntitiesRuleGroupsV1RequestMessage,
  PostEntitiesRulesValidateFilepathV1RequestMessage,
  PutEntitiesNetworkLocationsV1RequestMessage,
  PutEntitiesPoliciesV2RequestMessage,
PatchEntitiesNetworkLocationsV1PostData,
  PatchEntitiesRuleGroupsV1PostData,
  PostAggregatesEventsGetV1PostData,
  PostAggregatesPolicyRulesGetV1PostData,
  PostAggregatesRuleGroupsGetV1PostData,
  PostAggregatesRulesGetV1PostData,
  PostEntitiesNetworkLocationsMetadataV1PostData,
  PostEntitiesNetworkLocationsPrecedenceV1PostData,
  PostEntitiesNetworkLocationsV1PostData,
  PostEntitiesOntologyV1PostData,
  PostEntitiesRuleGroupsV1PostData,
  PostEntitiesRulesValidateFilepathV1PostData,
  PutEntitiesNetworkLocationsV1PostData,
  PutEntitiesPoliciesV2PostData,
} from './types';

import type { Bridge } from '../../bridge';

export class FwmgrApiBridge {

private bridge;

constructor(bridge: Bridge) {
  this.bridge = bridge;
}


    async deleteEntitiesNetworkLocationsV1(urlParams: DeleteEntitiesNetworkLocationsV1QueryParams): Promise<DeleteEntitiesNetworkLocationsV1ApiResponse> {
        
            const message: DeleteEntitiesNetworkLocationsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'deleteEntitiesNetworkLocationsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async deleteEntitiesPoliciesV1(urlParams: DeleteEntitiesPoliciesV1QueryParams): Promise<DeleteEntitiesPoliciesV1ApiResponse> {
        
            const message: DeleteEntitiesPoliciesV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'deleteEntitiesPoliciesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async deleteEntitiesRuleGroupsV1(urlParams: DeleteEntitiesRuleGroupsV1QueryParams): Promise<DeleteEntitiesRuleGroupsV1ApiResponse> {
        
            const message: DeleteEntitiesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'deleteEntitiesRuleGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesEventsV1(urlParams: GetEntitiesEventsV1QueryParams): Promise<GetEntitiesEventsV1ApiResponse> {
        
            const message: GetEntitiesEventsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesEventsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesFirewallFieldsV1(urlParams: GetEntitiesFirewallFieldsV1QueryParams): Promise<GetEntitiesFirewallFieldsV1ApiResponse> {
        
            const message: GetEntitiesFirewallFieldsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesFirewallFieldsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesNetworkLocationsDetailsV1(urlParams: GetEntitiesNetworkLocationsDetailsV1QueryParams): Promise<GetEntitiesNetworkLocationsDetailsV1ApiResponse> {
        
            const message: GetEntitiesNetworkLocationsDetailsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesNetworkLocationsDetailsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesNetworkLocationsV1(urlParams: GetEntitiesNetworkLocationsV1QueryParams): Promise<GetEntitiesNetworkLocationsV1ApiResponse> {
        
            const message: GetEntitiesNetworkLocationsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesNetworkLocationsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesPlatformsV1(urlParams: GetEntitiesPlatformsV1QueryParams): Promise<GetEntitiesPlatformsV1ApiResponse> {
        
            const message: GetEntitiesPlatformsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesPlatformsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesPoliciesV1(urlParams: GetEntitiesPoliciesV1QueryParams): Promise<GetEntitiesPoliciesV1ApiResponse> {
        
            const message: GetEntitiesPoliciesV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesPoliciesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesRuleGroupsV1(urlParams: GetEntitiesRuleGroupsV1QueryParams): Promise<GetEntitiesRuleGroupsV1ApiResponse> {
        
            const message: GetEntitiesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesRuleGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getEntitiesRulesV1(urlParams: GetEntitiesRulesV1QueryParams): Promise<GetEntitiesRulesV1ApiResponse> {
        
            const message: GetEntitiesRulesV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getEntitiesRulesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getLibraryEntitiesRuleGroupsV1(urlParams: GetLibraryEntitiesRuleGroupsV1QueryParams): Promise<GetLibraryEntitiesRuleGroupsV1ApiResponse> {
        
            const message: GetLibraryEntitiesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getLibraryEntitiesRuleGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getLibraryQueriesRuleGroupsV1(urlParams: GetLibraryQueriesRuleGroupsV1QueryParams = {}): Promise<GetLibraryQueriesRuleGroupsV1ApiResponse> {
        
            const message: GetLibraryQueriesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getLibraryQueriesRuleGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesEventsV1(urlParams: GetQueriesEventsV1QueryParams = {}): Promise<GetQueriesEventsV1ApiResponse> {
        
            const message: GetQueriesEventsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesEventsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesFirewallFieldsV1(urlParams: GetQueriesFirewallFieldsV1QueryParams = {}): Promise<GetQueriesFirewallFieldsV1ApiResponse> {
        
            const message: GetQueriesFirewallFieldsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesFirewallFieldsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesNetworkLocationsV1(urlParams: GetQueriesNetworkLocationsV1QueryParams = {}): Promise<GetQueriesNetworkLocationsV1ApiResponse> {
        
            const message: GetQueriesNetworkLocationsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesNetworkLocationsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesPlatformsV1(urlParams: GetQueriesPlatformsV1QueryParams = {}): Promise<GetQueriesPlatformsV1ApiResponse> {
        
            const message: GetQueriesPlatformsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesPlatformsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesPolicyRulesV1(urlParams: GetQueriesPolicyRulesV1QueryParams = {}): Promise<GetQueriesPolicyRulesV1ApiResponse> {
        
            const message: GetQueriesPolicyRulesV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesPolicyRulesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesRuleGroupsV1(urlParams: GetQueriesRuleGroupsV1QueryParams = {}): Promise<GetQueriesRuleGroupsV1ApiResponse> {
        
            const message: GetQueriesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesRuleGroupsV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesRulesV1(urlParams: GetQueriesRulesV1QueryParams = {}): Promise<GetQueriesRulesV1ApiResponse> {
        
            const message: GetQueriesRulesV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'getQueriesRulesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchEntitiesNetworkLocationsV1(postBody: PatchEntitiesNetworkLocationsV1PostData, urlParams: PatchEntitiesNetworkLocationsV1QueryParams = {}): Promise<PatchEntitiesNetworkLocationsV1ApiResponse> {
        
            const message: PatchEntitiesNetworkLocationsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'patchEntitiesNetworkLocationsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchEntitiesRuleGroupsV1(postBody: PatchEntitiesRuleGroupsV1PostData, urlParams: PatchEntitiesRuleGroupsV1QueryParams = {}): Promise<PatchEntitiesRuleGroupsV1ApiResponse> {
        
            const message: PatchEntitiesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'patchEntitiesRuleGroupsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesEventsGetV1(postBody: PostAggregatesEventsGetV1PostData, urlParams: PostAggregatesEventsGetV1QueryParams = {}): Promise<PostAggregatesEventsGetV1ApiResponse> {
        
            const message: PostAggregatesEventsGetV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postAggregatesEventsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesPolicyRulesGetV1(postBody: PostAggregatesPolicyRulesGetV1PostData, urlParams: PostAggregatesPolicyRulesGetV1QueryParams = {}): Promise<PostAggregatesPolicyRulesGetV1ApiResponse> {
        
            const message: PostAggregatesPolicyRulesGetV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postAggregatesPolicyRulesGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesRuleGroupsGetV1(postBody: PostAggregatesRuleGroupsGetV1PostData, urlParams: PostAggregatesRuleGroupsGetV1QueryParams = {}): Promise<PostAggregatesRuleGroupsGetV1ApiResponse> {
        
            const message: PostAggregatesRuleGroupsGetV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postAggregatesRuleGroupsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesRulesGetV1(postBody: PostAggregatesRulesGetV1PostData, urlParams: PostAggregatesRulesGetV1QueryParams = {}): Promise<PostAggregatesRulesGetV1ApiResponse> {
        
            const message: PostAggregatesRulesGetV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postAggregatesRulesGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesNetworkLocationsMetadataV1(postBody: PostEntitiesNetworkLocationsMetadataV1PostData, urlParams: PostEntitiesNetworkLocationsMetadataV1QueryParams = {}): Promise<PostEntitiesNetworkLocationsMetadataV1ApiResponse> {
        
            const message: PostEntitiesNetworkLocationsMetadataV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postEntitiesNetworkLocationsMetadataV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesNetworkLocationsPrecedenceV1(postBody: PostEntitiesNetworkLocationsPrecedenceV1PostData, urlParams: PostEntitiesNetworkLocationsPrecedenceV1QueryParams = {}): Promise<PostEntitiesNetworkLocationsPrecedenceV1ApiResponse> {
        
            const message: PostEntitiesNetworkLocationsPrecedenceV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postEntitiesNetworkLocationsPrecedenceV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesNetworkLocationsV1(postBody: PostEntitiesNetworkLocationsV1PostData, urlParams: PostEntitiesNetworkLocationsV1QueryParams = {}): Promise<PostEntitiesNetworkLocationsV1ApiResponse> {
        
            const message: PostEntitiesNetworkLocationsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postEntitiesNetworkLocationsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesOntologyV1(postBody: PostEntitiesOntologyV1PostData, urlParams: PostEntitiesOntologyV1QueryParams = {}): Promise<PostEntitiesOntologyV1ApiResponse> {
        
            const message: PostEntitiesOntologyV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postEntitiesOntologyV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesRuleGroupsV1(postBody: PostEntitiesRuleGroupsV1PostData, urlParams: PostEntitiesRuleGroupsV1QueryParams = {}): Promise<PostEntitiesRuleGroupsV1ApiResponse> {
        
            const message: PostEntitiesRuleGroupsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postEntitiesRuleGroupsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesRulesValidateFilepathV1(postBody: PostEntitiesRulesValidateFilepathV1PostData, urlParams: PostEntitiesRulesValidateFilepathV1QueryParams = {}): Promise<PostEntitiesRulesValidateFilepathV1ApiResponse> {
        
            const message: PostEntitiesRulesValidateFilepathV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'postEntitiesRulesValidateFilepathV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async putEntitiesNetworkLocationsV1(postBody: PutEntitiesNetworkLocationsV1PostData, urlParams: PutEntitiesNetworkLocationsV1QueryParams = {}): Promise<PutEntitiesNetworkLocationsV1ApiResponse> {
        
            const message: PutEntitiesNetworkLocationsV1RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'putEntitiesNetworkLocationsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async putEntitiesPoliciesV2(postBody: PutEntitiesPoliciesV2PostData, urlParams: PutEntitiesPoliciesV2QueryParams = {}): Promise<PutEntitiesPoliciesV2ApiResponse> {
        
            const message: PutEntitiesPoliciesV2RequestMessage = {
                type: 'api',
                api: 'fwmgr',
                method: 'putEntitiesPoliciesV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

}
