/**
*
* This file is autogenerated from the configuration file at `config/apis/detects.json`.
*
* DO NOT EDIT DIRECTLY
*
* If you need to change the contents of this file please edit the above configuration file and
* then run:
*
* ```
* yarn cs-gen platform-apis
* ```
*
**/

import type {
GetEntitiesSuppressedDevicesV1QueryParams,
  PatchEntitiesDetectsV2QueryParams,
  PatchQueriesDetectsV1QueryParams,
  PatchQueriesDetectsV2QueryParams,
  PostAggregatesDetectsGetV1QueryParams,
  PostEntitiesSummariesGetV1QueryParams,
  PostEntitiesSuppressedDevicesV1QueryParams,
GetEntitiesSuppressedDevicesV1ApiResponse,
  PatchEntitiesDetectsV2ApiResponse,
  PatchQueriesDetectsV1ApiResponse,
  PatchQueriesDetectsV2ApiResponse,
  PostAggregatesDetectsGetV1ApiResponse,
  PostEntitiesSummariesGetV1ApiResponse,
  PostEntitiesSuppressedDevicesV1ApiResponse,
GetEntitiesSuppressedDevicesV1RequestMessage,
  PatchEntitiesDetectsV2RequestMessage,
  PatchQueriesDetectsV1RequestMessage,
  PatchQueriesDetectsV2RequestMessage,
  PostAggregatesDetectsGetV1RequestMessage,
  PostEntitiesSummariesGetV1RequestMessage,
  PostEntitiesSuppressedDevicesV1RequestMessage,
PatchEntitiesDetectsV2PostData,
  PatchQueriesDetectsV1PostData,
  PatchQueriesDetectsV2PostData,
  PostAggregatesDetectsGetV1PostData,
  PostEntitiesSummariesGetV1PostData,
  PostEntitiesSuppressedDevicesV1PostData,
} from './types';

import type { Bridge } from '../../bridge';

export class DetectsApiBridge {

private bridge;

constructor(bridge: Bridge) {
  this.bridge = bridge;
}


    async getEntitiesSuppressedDevicesV1(urlParams: GetEntitiesSuppressedDevicesV1QueryParams = {}): Promise<GetEntitiesSuppressedDevicesV1ApiResponse> {
        
            const message: GetEntitiesSuppressedDevicesV1RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'getEntitiesSuppressedDevicesV1',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchEntitiesDetectsV2(postBody: PatchEntitiesDetectsV2PostData, urlParams: PatchEntitiesDetectsV2QueryParams = {}): Promise<PatchEntitiesDetectsV2ApiResponse> {
        
            const message: PatchEntitiesDetectsV2RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'patchEntitiesDetectsV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchQueriesDetectsV1(postBody: PatchQueriesDetectsV1PostData, urlParams: PatchQueriesDetectsV1QueryParams = {}): Promise<PatchQueriesDetectsV1ApiResponse> {
        
            const message: PatchQueriesDetectsV1RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'patchQueriesDetectsV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async patchQueriesDetectsV2(postBody: PatchQueriesDetectsV2PostData, urlParams: PatchQueriesDetectsV2QueryParams = {}): Promise<PatchQueriesDetectsV2ApiResponse> {
        
            const message: PatchQueriesDetectsV2RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'patchQueriesDetectsV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesDetectsGetV1(postBody: PostAggregatesDetectsGetV1PostData, urlParams: PostAggregatesDetectsGetV1QueryParams = {}): Promise<PostAggregatesDetectsGetV1ApiResponse> {
        
            const message: PostAggregatesDetectsGetV1RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'postAggregatesDetectsGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesSummariesGetV1(postBody: PostEntitiesSummariesGetV1PostData, urlParams: PostEntitiesSummariesGetV1QueryParams = {}): Promise<PostEntitiesSummariesGetV1ApiResponse> {
        
            const message: PostEntitiesSummariesGetV1RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'postEntitiesSummariesGetV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesSuppressedDevicesV1(postBody: PostEntitiesSuppressedDevicesV1PostData, urlParams: PostEntitiesSuppressedDevicesV1QueryParams = {}): Promise<PostEntitiesSuppressedDevicesV1ApiResponse> {
        
            const message: PostEntitiesSuppressedDevicesV1RequestMessage = {
                type: 'api',
                api: 'detects',
                method: 'postEntitiesSuppressedDevicesV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

}
