/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/

import type { Bridge } from '../../bridge';

import type {
  ApiResponsePayload,
  BaseApiRequestMessage,
  BaseApiResponseMessage,
  BaseUrlParams,
  QueryParam,
} from '../../types';

export type RemoteResponseRequestApi = 'remoteResponse';

export type CommonApiResponseMessage =
  BaseApiResponseMessage<ApiResponsePayload>;

export interface CommonApiRequestMessage
  extends BaseApiRequestMessage<BaseUrlParams, unknown> {
  api: RemoteResponseRequestApi;
}

// types for getQueriesPutFilesV1

export interface GetQueriesPutFilesV1QueryParams extends BaseUrlParams {
  filter?: string;
  limit?: QueryParam;
  offset?: QueryParam;
  sort?: QueryParam;
}

export type GetQueriesPutFilesV1ApiResponse = ApiResponsePayload;

export type GetQueriesPutFilesV1ResponseMessage =
  BaseApiResponseMessage<GetQueriesPutFilesV1ApiResponse>;

export interface GetQueriesPutFilesV1RequestMessage
  extends BaseApiRequestMessage<GetQueriesPutFilesV1QueryParams> {
  api: RemoteResponseRequestApi;
  method: 'getQueriesPutFilesV1';
}

// types for getQueriesScriptsV1

export interface GetQueriesScriptsV1QueryParams extends BaseUrlParams {
  filter?: string;
  limit?: QueryParam;
  offset?: QueryParam;
  sort?: QueryParam;
}

export type GetQueriesScriptsV1ApiResponse = ApiResponsePayload;

export type GetQueriesScriptsV1ResponseMessage =
  BaseApiResponseMessage<GetQueriesScriptsV1ApiResponse>;

export interface GetQueriesScriptsV1RequestMessage
  extends BaseApiRequestMessage<GetQueriesScriptsV1QueryParams> {
  api: RemoteResponseRequestApi;
  method: 'getQueriesScriptsV1';
}

// types for postEntitiesPutFilesGetV1

export type PostEntitiesPutFilesGetV1QueryParams = BaseUrlParams;

export type PostEntitiesPutFilesGetV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesPutFilesGetV1PostData {}

export type PostEntitiesPutFilesGetV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesPutFilesGetV1ApiResponse>;

export interface PostEntitiesPutFilesGetV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesPutFilesGetV1QueryParams,
    PostEntitiesPutFilesGetV1PostData
  > {
  api: RemoteResponseRequestApi;
  method: 'postEntitiesPutFilesGetV1';
}

// types for postEntitiesPutFilesV1

export type PostEntitiesPutFilesV1QueryParams = BaseUrlParams;

export type PostEntitiesPutFilesV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesPutFilesV1PostData {}

export type PostEntitiesPutFilesV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesPutFilesV1ApiResponse>;

export interface PostEntitiesPutFilesV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesPutFilesV1QueryParams,
    PostEntitiesPutFilesV1PostData
  > {
  api: RemoteResponseRequestApi;
  method: 'postEntitiesPutFilesV1';
}

// types for postEntitiesScriptsGetV2

export type PostEntitiesScriptsGetV2QueryParams = BaseUrlParams;

export type PostEntitiesScriptsGetV2ApiResponse = ApiResponsePayload;

export interface PostEntitiesScriptsGetV2PostData {}

export type PostEntitiesScriptsGetV2ResponseMessage =
  BaseApiResponseMessage<PostEntitiesScriptsGetV2ApiResponse>;

export interface PostEntitiesScriptsGetV2RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesScriptsGetV2QueryParams,
    PostEntitiesScriptsGetV2PostData
  > {
  api: RemoteResponseRequestApi;
  method: 'postEntitiesScriptsGetV2';
}

// general types

export type RemoteResponseApiRequestMessage =
  | GetQueriesScriptsV1RequestMessage
  | PostEntitiesScriptsGetV2RequestMessage;

export type RemoteResponseApiResponseMessage =
  | GetQueriesScriptsV1ResponseMessage
  | PostEntitiesScriptsGetV2ResponseMessage;

export class RemoteResponseApiBridge {
  private bridge;

  constructor(bridge: Bridge) {
    this.bridge = bridge;
  }

  getBridge() {
    return this.bridge;
  }

  async getScriptIds(
    urlParams: GetQueriesScriptsV1QueryParams = {}
  ): Promise<GetQueriesScriptsV1ApiResponse> {
    const message: GetQueriesScriptsV1RequestMessage = {
      type: 'api',
      api: 'remoteResponse',
      method: 'getQueriesScriptsV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async getScriptEntities(
    postBody: PostEntitiesScriptsGetV2PostData,
    urlParams: PostEntitiesScriptsGetV2QueryParams = {}
  ): Promise<PostEntitiesScriptsGetV2ApiResponse> {
    const message: PostEntitiesScriptsGetV2RequestMessage = {
      type: 'api',
      api: 'remoteResponse',
      method: 'postEntitiesScriptsGetV2',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }
}
