/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/

import type { Bridge } from '../../bridge';

import type {
  ApiResponsePayload,
  BaseApiRequestMessage,
  BaseApiResponseMessage,
  BaseUrlParams,
  QueryParam,
} from '../../types';

export type MitreRequestApi = 'mitre';

export type CommonApiResponseMessage =
  BaseApiResponseMessage<ApiResponsePayload>;

export interface CommonApiRequestMessage
  extends BaseApiRequestMessage<BaseUrlParams, unknown> {
  api: MitreRequestApi;
}

// types for getEntitiesMatrixV1

export interface GetEntitiesMatrixV1QueryParams extends BaseUrlParams {
  version?: QueryParam;
}

export type GetEntitiesMatrixV1ApiResponse = ApiResponsePayload;

export type GetEntitiesMatrixV1ResponseMessage =
  BaseApiResponseMessage<GetEntitiesMatrixV1ApiResponse>;

export interface GetEntitiesMatrixV1RequestMessage
  extends BaseApiRequestMessage<GetEntitiesMatrixV1QueryParams> {
  api: MitreRequestApi;
  method: 'getEntitiesMatrixV1';
}

// general types

export type MitreApiRequestMessage = GetEntitiesMatrixV1RequestMessage;

export type MitreApiResponseMessage = GetEntitiesMatrixV1ResponseMessage;

export class MitreApiBridge {
  private bridge;

  constructor(bridge: Bridge) {
    this.bridge = bridge;
  }

  getBridge() {
    return this.bridge;
  }

  async getEntitiesMatrixV1(
    urlParams: GetEntitiesMatrixV1QueryParams = {}
  ): Promise<GetEntitiesMatrixV1ApiResponse> {
    const message: GetEntitiesMatrixV1RequestMessage = {
      type: 'api',
      api: 'mitre',
      method: 'getEntitiesMatrixV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }
}
