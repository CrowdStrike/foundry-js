/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/

import type { Bridge } from '../../bridge';

import type {
  ApiResponsePayload,
  BaseApiRequestMessage,
  BaseApiResponseMessage,
  BaseUrlParams,
  QueryParam,
} from '../../types';

export type WorkflowsRequestApi = 'workflows';

export type CommonApiResponseMessage =
  BaseApiResponseMessage<ApiResponsePayload>;

export interface CommonApiRequestMessage
  extends BaseApiRequestMessage<BaseUrlParams, unknown> {
  api: WorkflowsRequestApi;
}

// types for getEntitiesExecutionResultsV1

export interface GetEntitiesExecutionResultsV1QueryParams
  extends BaseUrlParams {
  ids: QueryParam;
}

export type GetEntitiesExecutionResultsV1ApiResponse = ApiResponsePayload;

export type GetEntitiesExecutionResultsV1ResponseMessage =
  BaseApiResponseMessage<GetEntitiesExecutionResultsV1ApiResponse>;

export interface GetEntitiesExecutionResultsV1RequestMessage
  extends BaseApiRequestMessage<GetEntitiesExecutionResultsV1QueryParams> {
  api: WorkflowsRequestApi;
  method: 'getEntitiesExecutionResultsV1';
}

// types for postEntitiesExecuteV1

export interface PostEntitiesExecuteV1QueryParams extends BaseUrlParams {
  definitionId?: QueryParam;
  name?: QueryParam;
  key?: QueryParam;
  depth?: QueryParam;
}

export type PostEntitiesExecuteV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesExecuteV1PostData {}

export type PostEntitiesExecuteV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesExecuteV1ApiResponse>;

export interface PostEntitiesExecuteV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesExecuteV1QueryParams,
    PostEntitiesExecuteV1PostData
  > {
  api: WorkflowsRequestApi;
  method: 'postEntitiesExecuteV1';
}

// types for postEntitiesExecutionActionsV1

export interface PostEntitiesExecutionActionsV1QueryParams
  extends BaseUrlParams {
  actionName: QueryParam;
}

export type PostEntitiesExecutionActionsV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesExecutionActionsV1PostData {}

export type PostEntitiesExecutionActionsV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesExecutionActionsV1ApiResponse>;

export interface PostEntitiesExecutionActionsV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesExecutionActionsV1QueryParams,
    PostEntitiesExecutionActionsV1PostData
  > {
  api: WorkflowsRequestApi;
  method: 'postEntitiesExecutionActionsV1';
}

// general types

export type WorkflowsApiRequestMessage =
  | GetEntitiesExecutionResultsV1RequestMessage
  | PostEntitiesExecuteV1RequestMessage
  | PostEntitiesExecutionActionsV1RequestMessage;

export type WorkflowsApiResponseMessage =
  | GetEntitiesExecutionResultsV1ResponseMessage
  | PostEntitiesExecuteV1ResponseMessage
  | PostEntitiesExecutionActionsV1ResponseMessage;

export class WorkflowsApiBridge {
  private bridge;

  constructor(bridge: Bridge) {
    this.bridge = bridge;
  }

  getBridge() {
    return this.bridge;
  }

  async getEntitiesExecutionResultsV1(
    urlParams: GetEntitiesExecutionResultsV1QueryParams,
  ): Promise<GetEntitiesExecutionResultsV1ApiResponse> {
    const message: GetEntitiesExecutionResultsV1RequestMessage = {
      type: 'api',
      api: 'workflows',
      method: 'getEntitiesExecutionResultsV1',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesExecuteV1(
    postBody: PostEntitiesExecuteV1PostData,
    urlParams: PostEntitiesExecuteV1QueryParams = {},
  ): Promise<PostEntitiesExecuteV1ApiResponse> {
    const message: PostEntitiesExecuteV1RequestMessage = {
      type: 'api',
      api: 'workflows',
      method: 'postEntitiesExecuteV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesExecutionActionsV1(
    postBody: PostEntitiesExecutionActionsV1PostData,
    urlParams: PostEntitiesExecutionActionsV1QueryParams,
  ): Promise<PostEntitiesExecutionActionsV1ApiResponse> {
    const message: PostEntitiesExecutionActionsV1RequestMessage = {
      type: 'api',
      api: 'workflows',
      method: 'postEntitiesExecutionActionsV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }
}
