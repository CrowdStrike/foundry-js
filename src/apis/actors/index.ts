/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/

import type { Bridge } from '../../bridge';

import type {
  ApiResponsePayload,
  BaseApiRequestMessage,
  BaseApiResponseMessage,
  BaseUrlParams,
  QueryParam,
} from '../../types';

export type ActorsRequestApi = 'actors';

export type CommonApiResponseMessage =
  BaseApiResponseMessage<ApiResponsePayload>;

export interface CommonApiRequestMessage
  extends BaseApiRequestMessage<BaseUrlParams, {}> {
  api: ActorsRequestApi;
}

// types for getEntitiesActorsGetV2

export interface GetEntitiesActorsGetV2QueryParams extends BaseUrlParams {
  ids?: QueryParam;
}

export type GetEntitiesActorsGetV2ApiResponse = ApiResponsePayload;

export type GetEntitiesActorsGetV2ResponseMessage =
  BaseApiResponseMessage<GetEntitiesActorsGetV2ApiResponse>;

export interface GetEntitiesActorsGetV2RequestMessage
  extends BaseApiRequestMessage<GetEntitiesActorsGetV2QueryParams> {
  api: ActorsRequestApi;
  method: 'getEntitiesActorsGetV2';
}

// types for getQueriesActorsV2

export interface GetQueriesActorsV2QueryParams extends BaseUrlParams {
  filter?: string;
  limit?: QueryParam;
  offset?: QueryParam;
  q?: QueryParam;
  sort?: QueryParam;
}

export type GetQueriesActorsV2ApiResponse = ApiResponsePayload;

export type GetQueriesActorsV2ResponseMessage =
  BaseApiResponseMessage<GetQueriesActorsV2ApiResponse>;

export interface GetQueriesActorsV2RequestMessage
  extends BaseApiRequestMessage<GetQueriesActorsV2QueryParams> {
  api: ActorsRequestApi;
  method: 'getQueriesActorsV2';
}

// types for postAggregatesActorsGetV2

export type PostAggregatesActorsGetV2QueryParams = BaseUrlParams;

export type PostAggregatesActorsGetV2ApiResponse = ApiResponsePayload;

export interface PostAggregatesActorsGetV2PostData {}

export type PostAggregatesActorsGetV2ResponseMessage =
  BaseApiResponseMessage<PostAggregatesActorsGetV2ApiResponse>;

export interface PostAggregatesActorsGetV2RequestMessage
  extends BaseApiRequestMessage<
    PostAggregatesActorsGetV2QueryParams,
    PostAggregatesActorsGetV2PostData
  > {
  api: ActorsRequestApi;
  method: 'postAggregatesActorsGetV2';
}

// types for postEntitiesActorsGetV2

export interface PostEntitiesActorsGetV2QueryParams extends BaseUrlParams {
  ids?: QueryParam;
}

export type PostEntitiesActorsGetV2ApiResponse = ApiResponsePayload;

export interface PostEntitiesActorsGetV2PostData {}

export type PostEntitiesActorsGetV2ResponseMessage =
  BaseApiResponseMessage<PostEntitiesActorsGetV2ApiResponse>;

export interface PostEntitiesActorsGetV2RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesActorsGetV2QueryParams,
    PostEntitiesActorsGetV2PostData
  > {
  api: ActorsRequestApi;
  method: 'postEntitiesActorsGetV2';
}

// types for postEntitiesMitreV1

export type PostEntitiesMitreV1QueryParams = BaseUrlParams;

export type PostEntitiesMitreV1ApiResponse = ApiResponsePayload;

export interface PostEntitiesMitreV1PostData {}

export type PostEntitiesMitreV1ResponseMessage =
  BaseApiResponseMessage<PostEntitiesMitreV1ApiResponse>;

export interface PostEntitiesMitreV1RequestMessage
  extends BaseApiRequestMessage<
    PostEntitiesMitreV1QueryParams,
    PostEntitiesMitreV1PostData
  > {
  api: ActorsRequestApi;
  method: 'postEntitiesMitreV1';
}

// general types

export type ActorsApiRequestMessage =
  | GetEntitiesActorsGetV2RequestMessage
  | GetQueriesActorsV2RequestMessage
  | PostAggregatesActorsGetV2RequestMessage
  | PostEntitiesActorsGetV2RequestMessage
  | PostEntitiesMitreV1RequestMessage;

export type ActorsApiResponseMessage =
  | GetEntitiesActorsGetV2ResponseMessage
  | GetQueriesActorsV2ResponseMessage
  | PostAggregatesActorsGetV2ResponseMessage
  | PostEntitiesActorsGetV2ResponseMessage
  | PostEntitiesMitreV1ResponseMessage;

export class ActorsApiBridge {
  private bridge;

  constructor(bridge: Bridge) {
    this.bridge = bridge;
  }

  getBridge() {
    return this.bridge;
  }

  async getEntitiesActorsGetV2(
    urlParams: GetEntitiesActorsGetV2QueryParams = {}
  ): Promise<GetEntitiesActorsGetV2ApiResponse> {
    const message: GetEntitiesActorsGetV2RequestMessage = {
      type: 'api',
      api: 'actors',
      method: 'getEntitiesActorsGetV2',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async getQueriesActorsV2(
    urlParams: GetQueriesActorsV2QueryParams = {}
  ): Promise<GetQueriesActorsV2ApiResponse> {
    const message: GetQueriesActorsV2RequestMessage = {
      type: 'api',
      api: 'actors',
      method: 'getQueriesActorsV2',
      payload: {
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postAggregatesActorsGetV2(
    postBody: PostAggregatesActorsGetV2PostData,
    urlParams: PostAggregatesActorsGetV2QueryParams = {}
  ): Promise<PostAggregatesActorsGetV2ApiResponse> {
    const message: PostAggregatesActorsGetV2RequestMessage = {
      type: 'api',
      api: 'actors',
      method: 'postAggregatesActorsGetV2',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesActorsGetV2(
    postBody: PostEntitiesActorsGetV2PostData,
    urlParams: PostEntitiesActorsGetV2QueryParams = {}
  ): Promise<PostEntitiesActorsGetV2ApiResponse> {
    const message: PostEntitiesActorsGetV2RequestMessage = {
      type: 'api',
      api: 'actors',
      method: 'postEntitiesActorsGetV2',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }

  async postEntitiesMitreV1(
    postBody: PostEntitiesMitreV1PostData,
    urlParams: PostEntitiesMitreV1QueryParams = {}
  ): Promise<PostEntitiesMitreV1ApiResponse> {
    const message: PostEntitiesMitreV1RequestMessage = {
      type: 'api',
      api: 'actors',
      method: 'postEntitiesMitreV1',
      payload: {
        body: postBody,
        params: urlParams,
      },
    };

    return this.bridge.postMessage(message);
  }
}
