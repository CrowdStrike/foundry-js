/**
*
* This file is autogenerated from the configuration file at `config/apis/actors.json`.
*
* DO NOT EDIT DIRECTLY
*
* If you need to change the contents of this file please edit the above configuration file and
* then run:
*
* ```
* yarn cs-gen platform-apis
* ```
*
**/

import type {
GetEntitiesActorsGetV2QueryParams,
  GetQueriesActorsV2QueryParams,
  PostAggregatesActorsGetV2QueryParams,
  PostEntitiesActorsGetV2QueryParams,
  PostEntitiesMitreV1QueryParams,
GetEntitiesActorsGetV2ApiResponse,
  GetQueriesActorsV2ApiResponse,
  PostAggregatesActorsGetV2ApiResponse,
  PostEntitiesActorsGetV2ApiResponse,
  PostEntitiesMitreV1ApiResponse,
GetEntitiesActorsGetV2RequestMessage,
  GetQueriesActorsV2RequestMessage,
  PostAggregatesActorsGetV2RequestMessage,
  PostEntitiesActorsGetV2RequestMessage,
  PostEntitiesMitreV1RequestMessage,
PostAggregatesActorsGetV2PostData,
  PostEntitiesActorsGetV2PostData,
  PostEntitiesMitreV1PostData,
} from './types';

import type { Bridge } from '../../bridge';

export class ActorsApiBridge {

private bridge;

constructor(bridge: Bridge) {
  this.bridge = bridge;
}


    async getEntitiesActorsGetV2(urlParams: GetEntitiesActorsGetV2QueryParams = {}): Promise<GetEntitiesActorsGetV2ApiResponse> {
        
            const message: GetEntitiesActorsGetV2RequestMessage = {
                type: 'api',
                api: 'actors',
                method: 'getEntitiesActorsGetV2',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async getQueriesActorsV2(urlParams: GetQueriesActorsV2QueryParams = {}): Promise<GetQueriesActorsV2ApiResponse> {
        
            const message: GetQueriesActorsV2RequestMessage = {
                type: 'api',
                api: 'actors',
                method: 'getQueriesActorsV2',
                payload: {
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postAggregatesActorsGetV2(postBody: PostAggregatesActorsGetV2PostData, urlParams: PostAggregatesActorsGetV2QueryParams = {}): Promise<PostAggregatesActorsGetV2ApiResponse> {
        
            const message: PostAggregatesActorsGetV2RequestMessage = {
                type: 'api',
                api: 'actors',
                method: 'postAggregatesActorsGetV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesActorsGetV2(postBody: PostEntitiesActorsGetV2PostData, urlParams: PostEntitiesActorsGetV2QueryParams = {}): Promise<PostEntitiesActorsGetV2ApiResponse> {
        
            const message: PostEntitiesActorsGetV2RequestMessage = {
                type: 'api',
                api: 'actors',
                method: 'postEntitiesActorsGetV2',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

    async postEntitiesMitreV1(postBody: PostEntitiesMitreV1PostData, urlParams: PostEntitiesMitreV1QueryParams = {}): Promise<PostEntitiesMitreV1ApiResponse> {
        
            const message: PostEntitiesMitreV1RequestMessage = {
                type: 'api',
                api: 'actors',
                method: 'postEntitiesMitreV1',
                payload: {
                  body: postBody,
                  params: urlParams,
                },
            };
        

        return this.bridge.postMessage(message);
    }

}
