/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
import type { Bridge } from '../../bridge';
import type { ApiResponsePayload, BaseApiRequestMessage, BaseApiResponseMessage, BaseUrlParams, QueryParam } from '../../types';
export type IncidentsRequestApi = 'incidents';
export type CommonApiResponseMessage = BaseApiResponseMessage<ApiResponsePayload>;
export interface CommonApiRequestMessage extends BaseApiRequestMessage<BaseUrlParams, unknown> {
    api: IncidentsRequestApi;
}
export interface GetCombinedCrowdscoresV1QueryParams extends BaseUrlParams {
    filter?: string;
    limit?: QueryParam;
    offset?: QueryParam;
    sort?: QueryParam;
}
export type GetCombinedCrowdscoresV1ApiResponse = ApiResponsePayload;
export type GetCombinedCrowdscoresV1ResponseMessage = BaseApiResponseMessage<GetCombinedCrowdscoresV1ApiResponse>;
export interface GetCombinedCrowdscoresV1RequestMessage extends BaseApiRequestMessage<GetCombinedCrowdscoresV1QueryParams> {
    api: IncidentsRequestApi;
    method: 'getCombinedCrowdscoresV1';
}
export interface GetQueriesBehaviorsV1QueryParams extends BaseUrlParams {
    filter?: string;
    limit?: QueryParam;
    offset?: QueryParam;
    sort?: QueryParam;
}
export type GetQueriesBehaviorsV1ApiResponse = ApiResponsePayload;
export type GetQueriesBehaviorsV1ResponseMessage = BaseApiResponseMessage<GetQueriesBehaviorsV1ApiResponse>;
export interface GetQueriesBehaviorsV1RequestMessage extends BaseApiRequestMessage<GetQueriesBehaviorsV1QueryParams> {
    api: IncidentsRequestApi;
    method: 'getQueriesBehaviorsV1';
}
export interface GetQueriesIncidentsV1QueryParams extends BaseUrlParams {
    filter?: string;
    limit?: QueryParam;
    offset?: QueryParam;
    sort?: QueryParam;
}
export type GetQueriesIncidentsV1ApiResponse = ApiResponsePayload;
export type GetQueriesIncidentsV1ResponseMessage = BaseApiResponseMessage<GetQueriesIncidentsV1ApiResponse>;
export interface GetQueriesIncidentsV1RequestMessage extends BaseApiRequestMessage<GetQueriesIncidentsV1QueryParams> {
    api: IncidentsRequestApi;
    method: 'getQueriesIncidentsV1';
}
export type PostAggregatesBehaviorsGetV1QueryParams = BaseUrlParams;
export type PostAggregatesBehaviorsGetV1ApiResponse = ApiResponsePayload;
export type PostAggregatesBehaviorsGetV1PostData = Record<string, never>;
export type PostAggregatesBehaviorsGetV1ResponseMessage = BaseApiResponseMessage<PostAggregatesBehaviorsGetV1ApiResponse>;
export interface PostAggregatesBehaviorsGetV1RequestMessage extends BaseApiRequestMessage<PostAggregatesBehaviorsGetV1QueryParams, PostAggregatesBehaviorsGetV1PostData> {
    api: IncidentsRequestApi;
    method: 'postAggregatesBehaviorsGetV1';
}
export type PostAggregatesIncidentsGetV1QueryParams = BaseUrlParams;
export type PostAggregatesIncidentsGetV1ApiResponse = ApiResponsePayload;
export type PostAggregatesIncidentsGetV1PostData = Record<string, never>;
export type PostAggregatesIncidentsGetV1ResponseMessage = BaseApiResponseMessage<PostAggregatesIncidentsGetV1ApiResponse>;
export interface PostAggregatesIncidentsGetV1RequestMessage extends BaseApiRequestMessage<PostAggregatesIncidentsGetV1QueryParams, PostAggregatesIncidentsGetV1PostData> {
    api: IncidentsRequestApi;
    method: 'postAggregatesIncidentsGetV1';
}
export type PostEntitiesBehaviorsGetV1QueryParams = BaseUrlParams;
export type PostEntitiesBehaviorsGetV1ApiResponse = ApiResponsePayload;
export type PostEntitiesBehaviorsGetV1PostData = Record<string, never>;
export type PostEntitiesBehaviorsGetV1ResponseMessage = BaseApiResponseMessage<PostEntitiesBehaviorsGetV1ApiResponse>;
export interface PostEntitiesBehaviorsGetV1RequestMessage extends BaseApiRequestMessage<PostEntitiesBehaviorsGetV1QueryParams, PostEntitiesBehaviorsGetV1PostData> {
    api: IncidentsRequestApi;
    method: 'postEntitiesBehaviorsGetV1';
}
export interface PostEntitiesIncidentActionsV1QueryParams extends BaseUrlParams {
    note?: QueryParam;
}
export type PostEntitiesIncidentActionsV1ApiResponse = ApiResponsePayload;
export type PostEntitiesIncidentActionsV1PostData = Record<string, never>;
export type PostEntitiesIncidentActionsV1ResponseMessage = BaseApiResponseMessage<PostEntitiesIncidentActionsV1ApiResponse>;
export interface PostEntitiesIncidentActionsV1RequestMessage extends BaseApiRequestMessage<PostEntitiesIncidentActionsV1QueryParams, PostEntitiesIncidentActionsV1PostData> {
    api: IncidentsRequestApi;
    method: 'postEntitiesIncidentActionsV1';
}
export type PostEntitiesIncidentsGetV1QueryParams = BaseUrlParams;
export type PostEntitiesIncidentsGetV1ApiResponse = ApiResponsePayload;
export type PostEntitiesIncidentsGetV1PostData = Record<string, never>;
export type PostEntitiesIncidentsGetV1ResponseMessage = BaseApiResponseMessage<PostEntitiesIncidentsGetV1ApiResponse>;
export interface PostEntitiesIncidentsGetV1RequestMessage extends BaseApiRequestMessage<PostEntitiesIncidentsGetV1QueryParams, PostEntitiesIncidentsGetV1PostData> {
    api: IncidentsRequestApi;
    method: 'postEntitiesIncidentsGetV1';
}
export type IncidentsApiRequestMessage = GetCombinedCrowdscoresV1RequestMessage | GetQueriesBehaviorsV1RequestMessage | GetQueriesIncidentsV1RequestMessage | PostAggregatesBehaviorsGetV1RequestMessage | PostAggregatesIncidentsGetV1RequestMessage | PostEntitiesBehaviorsGetV1RequestMessage | PostEntitiesIncidentActionsV1RequestMessage | PostEntitiesIncidentsGetV1RequestMessage;
export type IncidentsApiResponseMessage = GetCombinedCrowdscoresV1ResponseMessage | GetQueriesBehaviorsV1ResponseMessage | GetQueriesIncidentsV1ResponseMessage | PostAggregatesBehaviorsGetV1ResponseMessage | PostAggregatesIncidentsGetV1ResponseMessage | PostEntitiesBehaviorsGetV1ResponseMessage | PostEntitiesIncidentActionsV1ResponseMessage | PostEntitiesIncidentsGetV1ResponseMessage;
export declare class IncidentsApiBridge {
    private bridge;
    constructor(bridge: Bridge);
    getBridge(): Bridge<import("../../types").LocalData>;
    getCombinedCrowdscoresV1(urlParams?: GetCombinedCrowdscoresV1QueryParams): Promise<GetCombinedCrowdscoresV1ApiResponse>;
    getQueriesBehaviorsV1(urlParams?: GetQueriesBehaviorsV1QueryParams): Promise<GetQueriesBehaviorsV1ApiResponse>;
    getQueriesIncidentsV1(urlParams?: GetQueriesIncidentsV1QueryParams): Promise<GetQueriesIncidentsV1ApiResponse>;
    postAggregatesBehaviorsGetV1(postBody: PostAggregatesBehaviorsGetV1PostData, urlParams?: PostAggregatesBehaviorsGetV1QueryParams): Promise<PostAggregatesBehaviorsGetV1ApiResponse>;
    postAggregatesIncidentsGetV1(postBody: PostAggregatesIncidentsGetV1PostData, urlParams?: PostAggregatesIncidentsGetV1QueryParams): Promise<PostAggregatesIncidentsGetV1ApiResponse>;
    postEntitiesBehaviorsGetV1(postBody: PostEntitiesBehaviorsGetV1PostData, urlParams?: PostEntitiesBehaviorsGetV1QueryParams): Promise<PostEntitiesBehaviorsGetV1ApiResponse>;
    postEntitiesIncidentActionsV1(postBody: PostEntitiesIncidentActionsV1PostData, urlParams?: PostEntitiesIncidentActionsV1QueryParams): Promise<PostEntitiesIncidentActionsV1ApiResponse>;
    postEntitiesIncidentsGetV1(postBody: PostEntitiesIncidentsGetV1PostData, urlParams?: PostEntitiesIncidentsGetV1QueryParams): Promise<PostEntitiesIncidentsGetV1ApiResponse>;
}
